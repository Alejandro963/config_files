= ActionController::RequestForgeryProtection

------------------------------------------------------------------------------
= Includes:
(from gem actionpack-3.2.9)
  AbstractController::Helpers
  AbstractController::Callbacks

(from gem actionpack-3.2.9)
------------------------------------------------------------------------------
Controller actions are protected from Cross-Site Request Forgery (CSRF)
attacks by including a token in the rendered html for your application. This
token is stored as a random string in the session, to which an attacker does
not have access. When a request reaches your application, Rails verifies the
received token with the token in the session. Only HTML and JavaScript
requests are checked, so this will not protect your XML API (presumably you'll
have a different authentication scheme there anyway). Also, GET requests are
not protected as these should be idempotent.

CSRF protection is turned on with the <tt>protect_from_forgery</tt> method,
which checks the token and resets the session if it doesn't match what was
expected. A call to this method is generated for new Rails applications by
default. You can customize the error message by editing public/422.html.

The token parameter is named <tt>authenticity_token</tt> by default. The name
and value of this token must be added to every layout that renders forms by
including <tt>csrf_meta_tags</tt> in the html <tt>head</tt>.

Learn more about CSRF attacks and securing your application in the {Ruby on
Rails Security Guide}[http://guides.rubyonrails.org/security.html].

------------------------------------------------------------------------------
= Instance methods:

  form_authenticity_param, form_authenticity_token, handle_unverified_request,
  protect_against_forgery?, verified_request?, verify_authenticity_token


