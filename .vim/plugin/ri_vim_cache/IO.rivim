= IO < Object

------------------------------------------------------------------------------
= Includes:
(from ruby site)
  Enumerable
  File::Constants

(from ruby site)
------------------------------------------------------------------------------
Class <tt>IO</tt> is the basis for all input and output in Ruby. An I/O stream
may be <em>duplexed</em> (that is, bidirectional), and so may use more than
one native operating system stream.

Many of the examples in this section use class <tt>File</tt>, the only
standard subclass of <tt>IO</tt>. The two classes are closely associated.

As used in this section, <em>portname</em> may take any of the following
forms.

* A plain string represents a filename suitable for the underlying operating
  system.

* A string starting with ``<tt>|</tt>'' indicates a subprocess. The remainder
  of the string following the ``<tt>|</tt>'' is invoked as a process with
  appropriate input/output channels connected to it.

* A string equal to ``<tt>|-</tt>'' will create another Ruby instance as a
  subprocess.

Ruby will convert pathnames between different operating system conventions if
possible. For instance, on a Windows system the filename
``<tt>/gumby/ruby/test.rb</tt>'' will be opened as
``<tt>\gumby\ruby\test.rb</tt>''. When specifying a Windows-style filename in
a Ruby string, remember to escape the backslashes:

  "c:\\gumby\\ruby\\test.rb"

Our examples here will use the Unix-style forward slashes;
<tt>File::SEPARATOR</tt> can be used to get the platform-specific separator
character.

I/O ports may be opened in any one of several different modes, which are shown
in this section as <em>mode</em>. The mode may either be a Fixnum or a String.
If numeric, it should be one of the operating system specific constants
(O_RDONLY, O_WRONLY, O_RDWR, O_APPEND and so on). See man open(2) for more
information.

If the mode is given as a String, it must be one of the values listed in the
following table.

  Mode |  Meaning
  -----+--------------------------------------------------------
  "r"  |  Read-only, starts at beginning of file  (default mode).
  -----+--------------------------------------------------------
  "r+" |  Read-write, starts at beginning of file.
  -----+--------------------------------------------------------
  "w"  |  Write-only, truncates existing file
       |  to zero length or creates a new file for writing.
  -----+--------------------------------------------------------
  "w+" |  Read-write, truncates existing file to zero length
       |  or creates a new file for reading and writing.
  -----+--------------------------------------------------------
  "a"  |  Write-only, starts at end of file if file exists,
       |  otherwise creates a new file for writing.
  -----+--------------------------------------------------------
  "a+" |  Read-write, starts at end of file if file exists,
       |  otherwise creates a new file for reading and
       |  writing.
  -----+--------------------------------------------------------
   "b" |  Binary file mode (may appear with
       |  any of the key letters listed above).
       |  Suppresses EOL <-> CRLF conversion on Windows. And
       |  sets external encoding to ASCII-8BIT unless explicitly
       |  specified.
  -----+--------------------------------------------------------
   "t" |  Text file mode (may appear with
       |  any of the key letters listed above except "b").

The global constant ARGF (also accessible as $<) provides an IO-like stream
which allows access to all files mentioned on the command line (or STDIN if no
files are mentioned). ARGF provides the methods <tt>#path</tt> and
<tt>#filename</tt> to access the name of the file currently being read.

== io/console

The io/console extension provides methods for interacting with the console. 
The console can be accessed from <tt>IO.console</tt> or the standard
input/output/error IO objects.

Requiring io/console adds the following methods:

* IO::console
* IO#raw
* IO#raw!
* IO#cooked
* IO#cooked!
* IO#getch
* IO#echo=
* IO#echo?
* IO#noecho
* IO#winsize
* IO#winsize=
* IO#iflush
* IO#ioflush
* IO#oflush

Example:

  require 'io/console'
  rows, columns = $stdin.winsize
  puts "You screen is #{columns} wide and #{rows} tall"

------------------------------------------------------------------------------
= Constants:

SEEK_CUR:
  [not documented]

SEEK_END:
  [not documented]

SEEK_SET:
  [not documented]

= Class methods:

  .binread, .binwrite, .console, .copy_stream, .for_fd, .foreach, .new, .open,
  .pipe, .popen, .read, .readlines, .select, .sysopen, .try_convert, .write

= Instance methods:

  <<, advise, autoclose=, autoclose?, binmode, binmode?, block_scanf, bytes,
  chars, close, close_on_exec=, close_on_exec?, close_read, close_write,
  closed?, codepoints, cooked, cooked!, each, each_byte, each_char,
  each_codepoint, each_line, echo=, echo?, eof, eof?, expect,
  external_encoding, fcntl, fdatasync, fileno, flush, fsync, getbyte, getc,
  getch, gets, iflush, inspect, internal_encoding, ioctl, ioflush, isatty,
  lineno, lineno=, lines, noecho, nread, oflush, pid, pos, pos=, print,
  printf, putc, puts, raw, raw!, read, read_nonblock, readbyte, readchar,
  readline, readlines, readpartial, ready?, reopen, rewind, scanf, seek,
  set_encoding, soak_up_spaces, stat, sync, sync=, sysread, sysseek, syswrite,
  tell, to_i, to_io, tty?, ungetbyte, ungetc, wait, winsize, winsize=, write,
  write_nonblock


------------------------------------------------------------------------------
Also found in:
  gem activesupport-3.2.12
  gem highline-1.6.15

